{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\song-drop\\\\song-drop-app\\\\src\\\\App.js\";\n// src/App.js\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\nimport VolumeSlider from './control-sliders/VolumeSlider';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioContext = new AudioContext();\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volume: 0,\n      playRate: 0,\n      pitch: 0\n    };\n    this.source = audioContext.createBufferSource();\n    this.buttonLabel = 'Begin';\n    this.gainNode = audioContext.createGain();\n    this.gainNode.connect(audioContext.destination);\n    console.log(audioContext);\n    this.getSound();\n    this.playing = false;\n    this.togglePlay = this.togglePlay.bind(this);\n  }\n\n  smoothAlgorithm(val) {\n    return Math.pow(val / 100, Math.log(10) / Math.log(2));\n  }\n\n  getSound() {\n    this.source = audioContext.createBufferSource();\n    var url = \"http://localhost:5001/sound\";\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var a = this;\n\n    this.source.onended = function () {\n      console.log(\"end\");\n      a.getSound();\n    };\n\n    request.onload = () => {\n      audioContext.decodeAudioData(request.response).then(function (data) {\n        a.source.buffer = data;\n        a.source.playbackRate.value = a.smoothAlgorithm(a.state.playRate);\n        a.source.connect(a.gainNode);\n        a.source.start(0);\n      }, e => {\n        console.log(e);\n      });\n    };\n\n    request.send();\n  }\n\n  togglePlay() {\n    this.playing = !this.playing;\n    this.playSoundLoop();\n  }\n\n  playSoundLoop() {\n    var elem = document.getElementById(\"toggleButton\");\n\n    if (this.playing) {\n      audioContext.resume();\n      elem.innerHTML = 'Stop';\n    } else {\n      audioContext.suspend();\n      elem.innerHTML = 'Start';\n    }\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      this.setState({\n        volume: dataFromServer.volume\n      });\n      this.setState({\n        playRate: dataFromServer.playRate\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(VolumeSlider, {\n      gainNode: this.gainNode,\n      volume: this.state.volume,\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(PlayRateSlider, {\n      source: this.source,\n      playRate: this.state.playRate,\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"toggleButton\",\n      type: \"button\",\n      onClick: (e, val) => {\n        this.togglePlay();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Begin\")), React.createElement(\"div\", {\n      id: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"where am i?\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/song-drop/song-drop-app/src/App.js"],"names":["React","Component","w3cwebsocket","W3CWebSocket","PlayRateSlider","VolumeSlider","AudioContext","window","webkitAudioContext","audioContext","client","App","constructor","props","state","volume","playRate","pitch","source","createBufferSource","buttonLabel","gainNode","createGain","connect","destination","console","log","getSound","playing","togglePlay","bind","smoothAlgorithm","val","Math","pow","url","request","XMLHttpRequest","open","responseType","a","onended","onload","decodeAudioData","response","then","data","buffer","playbackRate","value","start","e","send","playSoundLoop","elem","document","getElementById","resume","innerHTML","suspend","componentDidMount","onopen","onmessage","message","dataFromServer","JSON","parse","setState","render"],"mappings":"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","sourcesContent":["// src/App.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\n\r\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\r\nimport VolumeSlider from './control-sliders/VolumeSlider';\r\n\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\nconst audioContext = new AudioContext();\r\n\r\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\r\n\r\nclass App extends Component {\r\n\t\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tvolume: 0,\r\n    \tplayRate: 0,\r\n    \tpitch: 0,\r\n    };\r\n    \r\n    this.source = audioContext.createBufferSource();\r\n    this.buttonLabel = 'Begin';\r\n    \r\n    this.gainNode = audioContext.createGain();\r\n    this.gainNode.connect(audioContext.destination);\r\n    \r\n    console.log(audioContext);\r\n    \r\n    this.getSound();\r\n    \r\n    this.playing = false;\r\n    \r\n    this.togglePlay = this.togglePlay.bind(this);\r\n  }\r\n  \r\n  smoothAlgorithm(val) {\r\n\treturn Math.pow((val / 100), (Math.log(10) / Math.log(2)));\r\n  }\r\n  \r\n  getSound() {\r\n\t  this.source = audioContext.createBufferSource();\r\n\t  \r\n\t  var url = \"http://localhost:5001/sound\"\r\n      var request = new XMLHttpRequest();\r\n\t  request.open(\"GET\", url, true);\r\n\t  request.responseType = \"arraybuffer\";\r\n\t  var a = this;\r\n\t  \r\n\t  this.source.onended = function() {\r\n    \tconsole.log(\"end\");\r\n    \ta.getSound();\r\n      }\r\n\t    \r\n\t  request.onload = () => {\r\n\t\t  audioContext.decodeAudioData(request.response).then(function (data) {\r\n\t\t\t  a.source.buffer = data;\r\n\t\t\t  a.source.playbackRate.value = a.smoothAlgorithm(a.state.playRate);\r\n\t\t\t  a.source.connect(a.gainNode);\r\n\t\t\t  a.source.start(0);\r\n\t\t  }, (e) => { console.log(e); });\r\n  \t  }\r\n\t  request.send();\r\n  }\r\n  \r\n  togglePlay() {\r\n\t  this.playing = !this.playing;\r\n\t  this.playSoundLoop();\r\n  }\r\n  \r\n  playSoundLoop() {\r\n\tvar elem = document.getElementById(\"toggleButton\");\r\n\tif (this.playing) {\r\n\t\taudioContext.resume();\r\n\t\telem.innerHTML = 'Stop';\r\n\t}\r\n\telse {\r\n\t\taudioContext.suspend();\r\n\t\telem.innerHTML = 'Start';\r\n\t}\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t  client.onopen = () => {\r\n\t   console.log('WebSocket Client Connected');\r\n\t  };\r\n\t  client.onmessage = (message) => {\r\n\t    const dataFromServer = JSON.parse(message.data);\r\n\t    this.setState({volume: dataFromServer.volume});\r\n\t    this.setState({ playRate: dataFromServer.playRate });\r\n\t  };\r\n\t}  \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <center>\r\n          <VolumeSlider gainNode={this.gainNode} volume={this.state.volume} client={client}/>\r\n          <PlayRateSlider source={this.source} playRate={this.state.playRate} client={client}/>\r\n          <button id=\"toggleButton\" type=\"button\" onClick={(e, val) => { this.togglePlay(); }}>Begin</button>\r\n        </center>\r\n        <div id=\"upload\">\r\n          <p>where am i?</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}