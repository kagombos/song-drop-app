{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\scream-together\\\\scream-together-app\\\\src\\\\App.js\";\n// src/App.js\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { Slider } from '@material-ui/core';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioContext = new AudioContext();\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.source = audioContext.createBufferSource();\n    this.gainNode = audioContext.createGain();\n    this.gainNode.gain.value = this.state.value / 100;\n    this.gainNode.connect(audioContext.destination);\n    var url = \"http://localhost:5001/aaaaa.mp3\";\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var a = this;\n\n    request.onload = () => {\n      console.log(request.response);\n      var promise = audioContext.decodeAudioData(request.response).then(function (data) {\n        console.log(data);\n        a.source.buffer = data;\n        a.source.loop = true;\n        a.source.connect(a.gainNode);\n      }, e => {\n        console.log(e);\n      });\n      console.log(promise);\n    };\n\n    request.send();\n    this.playing = false;\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  togglePlay() {\n    this.playing = !this.playing;\n    this.playSoundLoop();\n  }\n\n  playSoundLoop() {\n    if (this.playing) {\n      this.gainNode.gain.value = this.state.value / 100;\n      this.source.addEventListener('ended', () => {\n        this.source.currentTime = 0; //this.source.start(0);\n      }, false);\n      console.log(this.source);\n      this.source.resume(0);\n    } else {\n      this.source.currentTime = 0;\n      this.source.stop(0);\n    }\n  }\n\n  onEditorStateChange(val) {\n    if (this.source !== undefined) {\n      console.log(this.gainNode.gain.value);\n      this.gainNode.gain.value = val / 100;\n    }\n\n    this.setState({\n      value: val\n    }, () => {\n      client.send(JSON.stringify(this.state));\n    });\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      this.handleChange(dataFromServer.value);\n    };\n  }\n\n  handleChange(value) {\n    //this.audio.volume = value / 100;\n    this.setState({\n      value: value\n    });\n  }\n\n  render() {\n    const sliderStyle = {\n      'marginLeft': '25%',\n      'marginRight': '25%'\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.value), React.createElement(\"div\", {\n      style: sliderStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Slider, {\n      id: \"slider\",\n      onChange: (e, val) => {\n        this.onEditorStateChange(val);\n      },\n      min: 0,\n      max: 100,\n      value: this.state.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: (e, val) => {\n        this.togglePlay();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Begin\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/scream-together/scream-together-app/src/App.js"],"names":["React","Component","w3cwebsocket","W3CWebSocket","Slider","AudioContext","window","webkitAudioContext","audioContext","client","App","constructor","props","state","value","source","createBufferSource","gainNode","createGain","gain","connect","destination","url","request","XMLHttpRequest","open","responseType","a","onload","console","log","response","promise","decodeAudioData","then","data","buffer","loop","e","send","playing","handleChange","bind","togglePlay","playSoundLoop","addEventListener","currentTime","resume","stop","onEditorStateChange","val","undefined","setState","JSON","stringify","componentDidMount","onopen","onmessage","message","dataFromServer","parse","render","sliderStyle"],"mappings":"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","sourcesContent":["// src/App.js\n\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { Slider } from '@material-ui/core';\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioContext = new AudioContext();\n\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\n\nclass App extends Component {\n\t\n  constructor(props) {\n    super(props);\n    this.state = {\n    \tvalue: 0\n    };\n    \n    this.source = audioContext.createBufferSource();\n    this.gainNode = audioContext.createGain();\n    this.gainNode.gain.value = this.state.value / 100;\n    this.gainNode.connect(audioContext.destination);\n    \n    var url = \"http://localhost:5001/aaaaa.mp3\"\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var a = this;\n    \n    request.onload = () => {\n      console.log(request.response);\n\n      var promise = audioContext.decodeAudioData(request.response).then(function (data) {\n    \tconsole.log(data);\n    \ta.source.buffer = data;\n    \ta.source.loop = true;\n    \ta.source.connect(a.gainNode);\n      }, (e) => { console.log(e); });\n      console.log(promise);\n    }\n    \n    request.send();\n    \n    this.playing = false;\n    \n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  \n  \n  togglePlay() {\n\t  this.playing = !this.playing;\n\t  this.playSoundLoop();\n  }\n  \n  playSoundLoop() {\n\t\n\tif (this.playing) {\n\t\tthis.gainNode.gain.value = this.state.value / 100;\n\t\t\n\t\tthis.source.addEventListener('ended', () => {\n\t\t\tthis.source.currentTime = 0;\n\t\t\t//this.source.start(0);\n\t\t}, false);\n\t\tconsole.log(this.source);\n\t\tthis.source.resume(0);\n\t}\n\telse {\n\t\tthis.source.currentTime = 0;\n\t\tthis.source.stop(0);\n\t}\n  }\n  \n  onEditorStateChange(val) {\n\tif (this.source !== undefined) {\n\t  console.log(this.gainNode.gain.value);\n\t  this.gainNode.gain.value = val / 100;\n\t}\n\tthis.setState({ value: val }, () => { client.send(JSON.stringify(this.state)); });    \n  }\n  \n  componentDidMount() {\n\t  client.onopen = () => {\n\t   console.log('WebSocket Client Connected');\n\t  };\n\t  client.onmessage = (message) => {\n\t    const dataFromServer = JSON.parse(message.data);\n\t    this.handleChange(dataFromServer.value);\n\t  };\n\t}  \n  \n  handleChange(value) {\n\t  //this.audio.volume = value / 100;\n\t  this.setState({ value: value });\n  }\n  \n  render() {\n\tconst sliderStyle = {\n\t  'marginLeft': '25%',\n\t  'marginRight': '25%',\n\t};\n    return (\n      <div className=\"App\">\n        <center>\n          <h1 id=\"value\">\n          \t{this.state.value}\n          </h1>\n          <div style={sliderStyle}>\n          \t<Slider id=\"slider\" \n          \t  onChange={(e, val) => {\n          \t\t  this.onEditorStateChange(val);\n          \t  } }\n          \t  min={0}\n              max={100}\n          \t  value={this.state.value}\n          \t/>\n          </div>\n          <button type=\"button\" onClick={(e, val) => { this.togglePlay(); }}>Begin</button>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}