{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\song-drop\\\\song-drop-app\\\\src\\\\App.js\";\n// src/App.js\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { Slider } from '@material-ui/core';\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\nimport VolumeSlider from './control-sliders/VolumeSlider';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst audioContext = new AudioContext();\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volume: 0,\n      playRate: 0,\n      pitch: 0\n    };\n    this.buttonLabel = 'Begin';\n    this.source = audioContext.createBufferSource();\n    this.gainNode = audioContext.createGain();\n    this.gainNode.gain.value = this.smoothAlgorithm(this.state.volume);\n    this.gainNode.connect(audioContext.destination);\n    this.source.playbackRate.value = this.smoothAlgorithm(this.state.playRate);\n    var url = \"http://localhost:5001/aaaaa.mp3\";\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var a = this;\n\n    request.onload = () => {\n      console.log(request.response);\n      var promise = audioContext.decodeAudioData(request.response).then(function (data) {\n        console.log(data);\n        a.source.buffer = data;\n        a.source.loop = true;\n        a.source.connect(a.gainNode);\n        a.source.start(0);\n      }, e => {\n        console.log(e);\n      });\n      console.log(promise);\n    };\n\n    request.send();\n    this.playing = false;\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n    this.handlePlayRateChange = this.handlePlayRateChange.bind(this);\n    this.togglePlay = this.togglePlay.bind(this);\n  }\n\n  smoothAlgorithm(val) {\n    return Math.pow(val / 100, Math.log(10) / Math.log(2));\n  }\n\n  togglePlay() {\n    this.playing = !this.playing;\n    this.playSoundLoop();\n  }\n\n  playSoundLoop() {\n    var elem = document.getElementById(\"toggleButton\");\n\n    if (this.playing) {\n      this.gainNode.gain.value = this.smoothAlgorithm(this.state.volume);\n      audioContext.resume();\n      elem.innerHTML = 'Stop';\n    } else {\n      audioContext.suspend();\n      elem.innerHTML = 'Start';\n    }\n  }\n\n  onPlayRateStateChange(val) {\n    if (this.source !== undefined) {\n      var smoothed = this.smoothAlgorithm(val);\n      this.source.playbackRate.value = smoothed;\n    }\n\n    this.setState({\n      playRate: val\n    }, () => {\n      client.send(JSON.stringify(this.state));\n    });\n  }\n\n  onVolumeStateChange(val) {\n    if (this.source !== undefined) {\n      this.gainNode.gain.value = this.smoothAlgorithm(val);\n    }\n\n    this.setState({\n      volume: val\n    }, () => {\n      client.send(JSON.stringify(this.state));\n    });\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      this.setState({\n        volume: dataFromServer.volume\n      });\n      this.setState({\n        playRate: dataFromServer.playRate\n      });\n    };\n  }\n\n  render() {\n    const sliderStyle = {\n      'marginLeft': '25%',\n      'marginRight': '25%'\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(VolumeSlider, {\n      gainNode: this.gainNode,\n      volume: this.state.volume,\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(PlayRateSlider, {\n      source: this.source,\n      playRate: this.state.playRate,\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"toggleButton\",\n      type: \"button\",\n      onClick: (e, val) => {\n        this.togglePlay();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Begin\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/song-drop/song-drop-app/src/App.js"],"names":["React","Component","w3cwebsocket","W3CWebSocket","Slider","PlayRateSlider","VolumeSlider","AudioContext","window","webkitAudioContext","audioContext","client","App","constructor","props","state","volume","playRate","pitch","buttonLabel","source","createBufferSource","gainNode","createGain","gain","value","smoothAlgorithm","connect","destination","playbackRate","url","request","XMLHttpRequest","open","responseType","a","onload","console","log","response","promise","decodeAudioData","then","data","buffer","loop","start","e","send","playing","handleVolumeChange","bind","handlePlayRateChange","togglePlay","val","Math","pow","playSoundLoop","elem","document","getElementById","resume","innerHTML","suspend","onPlayRateStateChange","undefined","smoothed","setState","JSON","stringify","onVolumeStateChange","componentDidMount","onopen","onmessage","message","dataFromServer","parse","render","sliderStyle"],"mappings":"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","sourcesContent":["// src/App.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport { Slider } from '@material-ui/core';\r\n\r\nimport PlayRateSlider from './control-sliders/PlayRateSlider';\r\nimport VolumeSlider from './control-sliders/VolumeSlider';\r\n\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\nconst audioContext = new AudioContext();\r\n\r\nconst client = new W3CWebSocket('ws://172.18.86.35:5000');\r\n\r\nclass App extends Component {\r\n\t\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tvolume: 0,\r\n    \tplayRate: 0,\r\n    \tpitch: 0,\r\n    };\r\n    \r\n    this.buttonLabel = 'Begin';\r\n    this.source = audioContext.createBufferSource();\r\n    \r\n    this.gainNode = audioContext.createGain();\r\n    this.gainNode.gain.value = this.smoothAlgorithm(this.state.volume);\r\n    this.gainNode.connect(audioContext.destination);\r\n    \r\n    this.source.playbackRate.value = this.smoothAlgorithm(this.state.playRate);\r\n    \r\n    var url = \"http://localhost:5001/aaaaa.mp3\"\r\n    var request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n    request.responseType = \"arraybuffer\";\r\n    var a = this;\r\n    \r\n    request.onload = () => {\r\n      console.log(request.response);\r\n\r\n      var promise = audioContext.decodeAudioData(request.response).then(function (data) {\r\n    \tconsole.log(data);\r\n    \ta.source.buffer = data;\r\n    \ta.source.loop = true;\r\n    \ta.source.connect(a.gainNode);\r\n    \ta.source.start(0);\r\n      }, (e) => { console.log(e); });\r\n      console.log(promise);\r\n    }\r\n    \r\n    request.send();\r\n    \r\n    this.playing = false;\r\n    \r\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n    this.handlePlayRateChange = this.handlePlayRateChange.bind(this);\r\n    this.togglePlay = this.togglePlay.bind(this);\r\n  }\r\n  \r\n  smoothAlgorithm(val) {\r\n\t  return Math.pow((val / 100), (Math.log(10) / Math.log(2)));\r\n  }\r\n  \r\n  togglePlay() {\r\n\t  this.playing = !this.playing;\r\n\t  this.playSoundLoop();\r\n  }\r\n  \r\n  playSoundLoop() {\r\n\tvar elem = document.getElementById(\"toggleButton\");\r\n\tif (this.playing) {\r\n\t\tthis.gainNode.gain.value = this.smoothAlgorithm(this.state.volume);\r\n\t\taudioContext.resume();\r\n\t\telem.innerHTML = 'Stop';\r\n\t}\r\n\telse {\r\n\t\taudioContext.suspend();\r\n\t\telem.innerHTML = 'Start';\r\n\t}\r\n  }\r\n  \r\n  onPlayRateStateChange(val) {\r\n    if (this.source !== undefined) {\r\n    \tvar smoothed = this.smoothAlgorithm(val);\r\n    \tthis.source.playbackRate.value = smoothed;\r\n    }\r\n    this.setState({ playRate: val }, () => { client.send(JSON.stringify(this.state)); });  \r\n  }\r\n  \r\n  onVolumeStateChange(val) {\r\n\tif (this.source !== undefined) {\r\n\t  this.gainNode.gain.value = this.smoothAlgorithm(val);\r\n\t}\r\n\tthis.setState({ volume: val }, () => { client.send(JSON.stringify(this.state)); });    \r\n  }\r\n  \r\n  componentDidMount() {\r\n\t  client.onopen = () => {\r\n\t   console.log('WebSocket Client Connected');\r\n\t  };\r\n\t  client.onmessage = (message) => {\r\n\t    const dataFromServer = JSON.parse(message.data);\r\n\t    this.setState({volume: dataFromServer.volume});\r\n\t    this.setState({ playRate: dataFromServer.playRate });\r\n\t  };\r\n\t}  \r\n  \r\n  render() {\r\n\tconst sliderStyle = {\r\n\t  'marginLeft': '25%',\r\n\t  'marginRight': '25%',\r\n\t};\r\n    return (\r\n      <div className=\"App\">\r\n        <center>\r\n          <VolumeSlider gainNode={this.gainNode} volume={this.state.volume} client={client}/>\r\n          <PlayRateSlider source={this.source} playRate={this.state.playRate} client={client}/>\r\n          <button id=\"toggleButton\" type=\"button\" onClick={(e, val) => { this.togglePlay(); }}>Begin</button>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}