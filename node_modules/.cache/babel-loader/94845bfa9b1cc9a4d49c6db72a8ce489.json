{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\if994249\\\\eclipse-workspace\\\\song-drop\\\\song-drop-app\\\\src\\\\control-sliders\\\\PlayRateSlider.js\";\nimport React, { Component } from \"react\";\nimport { Slider } from '@material-ui/core';\n\nclass PlayRateSlider extends Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n  }\n\n  componentDidUpdate() {\n    this.handlePlayRateChange(this.props.playRate);\n  }\n\n  smoothAlgorithm(val) {\n    return Math.pow(val / 100, Math.log(10) / Math.log(2));\n  }\n\n  onVolumeStateChange(val) {\n    this.props.gainNode.gain.value = this.smoothAlgorithm(val);\n    this.setState({\n      volume: val\n    }, () => {\n      this.props.client.send(JSON.stringify(this.state));\n    });\n  }\n\n  onPlayRateStateChange(val) {\n    if (this.source !== undefined) {\n      var smoothed = this.smoothAlgorithm(val);\n      this.source.playbackRate.value = smoothed;\n    }\n\n    this.setState({\n      playRate: val\n    }, () => {\n      this.props.client.send(JSON.stringify(this.state));\n    });\n  }\n\n  handleVolumeChange(volume) {\n    this.props.gainNode.gain.value = this.smoothAlgorithm(volume);\n  }\n\n  handlePlayRateChange(playRate) {\n    this.props.source.playbackRate.value = this.smoothAlgorithm(playRate);\n    this.setState({\n      playRate: playRate\n    });\n  }\n\n  render() {\n    const sliderStyle = {\n      'marginLeft': '25%',\n      'marginRight': '25%'\n    }; //this.props.gainNode.gain.value = this.smoothAlgorithm(volume);\n\n    return React.createElement(\"div\", {\n      className: \"PlayRateSlider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Volume\"), React.createElement(\"div\", {\n      style: sliderStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Slider, {\n      id: \"slider\",\n      onChange: (e, val) => {\n        this.onPlayRateStateChange(val);\n      },\n      min: 0,\n      max: 200,\n      value: this.props.playRate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PlayRateSlider;","map":{"version":3,"sources":["C:/Users/if994249/eclipse-workspace/song-drop/song-drop-app/src/control-sliders/PlayRateSlider.js"],"names":["React","Component","Slider","PlayRateSlider","constructor","props","console","log","componentDidUpdate","handlePlayRateChange","playRate","smoothAlgorithm","val","Math","pow","onVolumeStateChange","gainNode","gain","value","setState","volume","client","send","JSON","stringify","state","onPlayRateStateChange","source","undefined","smoothed","playbackRate","handleVolumeChange","render","sliderStyle","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AAEtCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AAEDG,EAAAA,kBAAkB,GAAG;AACpB,SAAKC,oBAAL,CAA0B,KAAKJ,KAAL,CAAWK,QAArC;AACA;;AAEDC,EAAAA,eAAe,CAACC,GAAD,EAAM;AACnB,WAAOC,IAAI,CAACC,GAAL,CAAUF,GAAG,GAAG,GAAhB,EAAuBC,IAAI,CAACN,GAAL,CAAS,EAAT,IAAeM,IAAI,CAACN,GAAL,CAAS,CAAT,CAAtC,CAAP;AACD;;AAEDQ,EAAAA,mBAAmB,CAACH,GAAD,EAAM;AACxB,SAAKP,KAAL,CAAWW,QAAX,CAAoBC,IAApB,CAAyBC,KAAzB,GAAiC,KAAKP,eAAL,CAAqBC,GAArB,CAAjC;AACA,SAAKO,QAAL,CAAc;AAAEC,MAAAA,MAAM,EAAER;AAAV,KAAd,EAA+B,MAAM;AAAE,WAAKP,KAAL,CAAWgB,MAAX,CAAkBC,IAAlB,CAAuBC,IAAI,CAACC,SAAL,CAAe,KAAKC,KAApB,CAAvB;AAAqD,KAA5F;AACA;;AAEDC,EAAAA,qBAAqB,CAACd,GAAD,EAAM;AACvB,QAAI,KAAKe,MAAL,KAAgBC,SAApB,EAA+B;AAC9B,UAAIC,QAAQ,GAAG,KAAKlB,eAAL,CAAqBC,GAArB,CAAf;AACA,WAAKe,MAAL,CAAYG,YAAZ,CAAyBZ,KAAzB,GAAiCW,QAAjC;AACA;;AACD,SAAKV,QAAL,CAAc;AAAET,MAAAA,QAAQ,EAAEE;AAAZ,KAAd,EAAiC,MAAM;AAAE,WAAKP,KAAL,CAAWgB,MAAX,CAAkBC,IAAlB,CAAuBC,IAAI,CAACC,SAAL,CAAe,KAAKC,KAApB,CAAvB;AAAqD,KAA9F;AACD;;AAEAM,EAAAA,kBAAkB,CAACX,MAAD,EAAS;AAC1B,SAAKf,KAAL,CAAWW,QAAX,CAAoBC,IAApB,CAAyBC,KAAzB,GAAiC,KAAKP,eAAL,CAAqBS,MAArB,CAAjC;AACA;;AAEDX,EAAAA,oBAAoB,CAACC,QAAD,EAAW;AAC9B,SAAKL,KAAL,CAAWsB,MAAX,CAAkBG,YAAlB,CAA+BZ,KAA/B,GAAuC,KAAKP,eAAL,CAAqBD,QAArB,CAAvC;AACA,SAAKS,QAAL,CAAc;AAAET,MAAAA,QAAQ,EAAEA;AAAZ,KAAd;AACA;;AAEJsB,EAAAA,MAAM,GAAG;AACR,UAAMC,WAAW,GAAG;AAClB,oBAAc,KADI;AAElB,qBAAe;AAFG,KAApB,CADQ,CAKR;;AACA,WACA;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,MAAA,KAAK,EAAEA,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,QAAX;AACE,MAAA,QAAQ,EAAE,CAACC,CAAD,EAAItB,GAAJ,KAAY;AACrB,aAAKc,qBAAL,CAA2Bd,GAA3B;AACA,OAHH;AAIE,MAAA,GAAG,EAAE,CAJP;AAKG,MAAA,GAAG,EAAE,GALR;AAME,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWK,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFF,CADA;AAeA;;AA1DqC;;AA6DvC,eAAeP,cAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Slider } from '@material-ui/core';\r\n\r\nclass PlayRateSlider extends Component {\r\n\t\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    console.log(props);\r\n\t}\r\n\t\r\n\tcomponentDidUpdate() {\r\n\t\tthis.handlePlayRateChange(this.props.playRate);\r\n\t}\r\n\t\r\n\tsmoothAlgorithm(val) {\r\n\t  return Math.pow((val / 100), (Math.log(10) / Math.log(2)));\r\n\t}\r\n\t\r\n\tonVolumeStateChange(val) {\r\n\t\tthis.props.gainNode.gain.value = this.smoothAlgorithm(val);\r\n\t\tthis.setState({ volume: val }, () => { this.props.client.send(JSON.stringify(this.state)); });    \r\n\t}\r\n\t\r\n\tonPlayRateStateChange(val) {\r\n\t    if (this.source !== undefined) {\r\n\t    \tvar smoothed = this.smoothAlgorithm(val);\r\n\t    \tthis.source.playbackRate.value = smoothed;\r\n\t    }\r\n\t    this.setState({ playRate: val }, () => { this.props.client.send(JSON.stringify(this.state)); });  \r\n\t  }\r\n\t\r\n    handleVolumeChange(volume) {\r\n    \tthis.props.gainNode.gain.value = this.smoothAlgorithm(volume);\r\n    }\r\n    \r\n    handlePlayRateChange(playRate) {\r\n  \t  this.props.source.playbackRate.value = this.smoothAlgorithm(playRate);\r\n  \t  this.setState({ playRate: playRate });\r\n    }\r\n\t\r\n\trender() {\r\n\t\tconst sliderStyle = {\r\n\t\t  'marginLeft': '25%',\r\n\t\t  'marginRight': '25%',\r\n\t\t};\r\n\t\t//this.props.gainNode.gain.value = this.smoothAlgorithm(volume);\r\n\t\treturn (\r\n\t\t<div className=\"PlayRateSlider\">\r\n\t\t  <p>Volume</p>\r\n\t\t  <div style={sliderStyle}>\r\n\t\t  \t<Slider id=\"slider\" \r\n\t\t  \t  onChange={(e, val) => {\r\n\t\t  \t\t  this.onPlayRateStateChange(val);\r\n\t\t  \t  } }\r\n\t\t  \t  min={0}\r\n\t\t      max={200}\r\n\t\t  \t  value={this.props.playRate}\r\n\t\t  \t/>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PlayRateSlider;"]},"metadata":{},"sourceType":"module"}